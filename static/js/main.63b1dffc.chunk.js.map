{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","testoLatino","settestoLatino","testoEgiziano","settestoEgiziano","layoutName","setlayoutName","detectCaps","setdetectCaps","useEffect","handleEsc","event","keyCode","window","addEventListener","removeEventListener","className","style","color","String","fromCodePoint","data","M","hieroglyphics","Grid","container","spacing","direction","item","xs","id","name","spellCheck","autoFocus","onChange","parole","target","value","paroleLatine","replace","split","vecchioTesto","length","soloUltima","map","val","carattere","undefined","join","translittera","readOnly","input","console","log","onKeyPress","button","layout","default","shift","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RA+JeA,MAlHf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,OAGuBJ,mBAAS,WAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAIuBN,oBAAS,GAJhC,mBAINO,EAJM,KAIMC,EAJN,KA4Db,OAtDAC,qBAAU,WACR,IAAMC,EAAY,SAACC,GACK,KAAlBA,EAAMC,QACRN,EAA6B,YAAfD,EAA2B,QAAU,WAE1B,KAAlBM,EAAMC,SACbN,EAA6B,YAAfD,EAA2B,QAAU,WACnDG,GAAeD,IAEPA,GACRD,EAAc,YAKlB,OAFAO,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,MAEvC,CAACL,EAAYE,IAqCd,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAClB,yBAAKC,MAAO,CAACC,MAAM,UAChBC,OAAOC,cAAcC,EAAKC,EAAEC,gBAE/B,kBAACC,EAAA,EAAD,CACAC,WAAS,EACTC,QAAS,EACTC,UAAU,OAER,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACb,8BACEC,GAAG,cACHC,KAAK,SACLC,WAAW,QACXC,WAAS,EACTC,SAxCS,SAACvB,GAClB,IACIwB,EAASxB,EAAMyB,OAAOC,MAYtBC,GADJH,GADAA,GADAA,GAFAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAASA,EAAOI,QAAQ,IAAK,WACbA,QAAQ,IAAK,WACbA,QAAQ,IAAK,WACbA,QAAQ,IAAK,WACbA,QAAQ,IAAK,WACbA,QAAQ,IAAK,WACbA,QAAQ,IAAK,WAEbA,QAAQ,OAAK,WACbA,QAAQ,IAAK,WACbA,QAAQ,OAAK,iBACHC,MAAM,KAC5BC,EAAexC,EAAYuC,MAAM,KACjCF,EAAaI,OAAWD,EAAaC,OAGzCxC,EAAeiC,GACf/B,EA3FJ,SAAsBkC,EAAcG,EAActC,EAAewC,GAC/D,OAAIL,IAAiB,GACZ,GAaAA,EAAaM,KAAI,SAAAC,GACtB,IAAIC,EAAYzB,EAAKwB,GACrB,YAAkBE,IAAdD,OACUC,IAARF,EACKA,EAEF,IAETC,EAAYA,EAAUvB,eACRmB,OAAS,EACdI,EAEF3B,OAAOC,cAAc0B,MAG1BE,KAAK,IA6DQC,CAAaX,KAqBtBD,MAAOpC,KAEX,kBAACuB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACb,8BACEC,GAAG,gBACHC,KAAK,WACLmB,UAAQ,EACRb,MAAOlC,MAGb,kBAAC,IAAD,CACE+B,SA/DS,SAACiB,GACdC,QAAQC,IAAI,gBAAiBF,IA+DzBG,WA5DW,SAACC,GACD,YAAXA,GAAmC,WAAXA,GAC1BjD,EAA6B,YAAfD,EAA2B,QAAU,WAErD+C,QAAQC,IAAI,iBAAkBE,IAyD1BlD,WAAYA,EACZmD,OAAQ,CACNC,QAAS,CACP,8CACA,kDACA,4CACA,2CACA,WAEFC,MAAO,CACL,mCACA,kCACA,sDACA,2CACA,iBC1IQC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.63b1dffc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport data from \"./transliteration/index.json\"; \n\nimport Grid from '@material-ui/core/Grid';\n\nimport Keyboard from 'react-simple-keyboard';\nimport 'react-simple-keyboard/build/css/index.css';\n\nfunction translittera(paroleLatine, vecchioTesto, testoEgiziano, soloUltima){\n  if (paroleLatine === []){\n    return \"\"\n  }\n  // if(soloultima) per evitare di repitere ricerche ma non funziona bene\n  if (false){\n    if(data[paroleLatine[paroleLatine.length]] === undefined){\n      if (paroleLatine[paroleLatine.length] !== undefined){\n        return testoEgiziano + paroleLatine[paroleLatine.length]\n      }\n      return testoEgiziano\n    }\n    return testoEgiziano + String.fromCodePoint(data[paroleLatine[paroleLatine.length]]);\n  }\n  else {\n    return paroleLatine.map(val => {\n      let carattere = data[val];\n      if (carattere === undefined){\n        if (val !== undefined){\n          return val\n        }\n        return \"\"\n      }\n      carattere = carattere.hieroglyphics;\n      if (carattere.length < 7) {\n        return carattere\n      }\n      return String.fromCodePoint(carattere);\n\n    }\n      ).join(\"\");\n  }\n}\n\nfunction App() {\n  const [testoLatino, settestoLatino] = useState(\"\");\n  const [testoEgiziano, settestoEgiziano] = useState(\"\");\n  const [layoutName, setlayoutName] = useState(\"default\");\n  const [detectCaps, setdetectCaps] = useState(false);\n\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 16) {\n        setlayoutName(layoutName === \"default\" ? \"shift\" : \"default\");\n      }\n      else if (event.keyCode === 20) {\n        setlayoutName(layoutName === \"default\" ? \"shift\" : \"default\");\n        setdetectCaps(!detectCaps);\n      }\n      else if (!detectCaps) {\n        setlayoutName(\"default\");\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, [layoutName, detectCaps]);\n  \n  var onChange = (input) => {\n    console.log(\"Input changed\", input);\n  }\n\n  var onKeyPress = (button) => {\n    if (button === \"{shift}\" || button === \"{lock}\") {\n      setlayoutName(layoutName === \"default\" ? \"shift\" : \"default\")\n    };\n    console.log(\"Button pressed\", button);\n  }\n\n  var handleChange = (event) => {\n    let soloUltimaParola = true;\n    let parole = event.target.value;\n    parole = parole.replace(\"x\", \"\\u1E2B\")\n    parole = parole.replace(\"X\", \"\\u1E96\")\n    parole = parole.replace(\"q\", \"\\u1E33\")\n    parole = parole.replace(\"a\", \"\\u1D9C\")\n    parole = parole.replace(\"A\", \"\\uA723\")\n    parole = parole.replace(\"S\", \"\\u015D\") \n    parole = parole.replace(\"D\", \"\\u1E0F\")\n    // Occhio che funziona solo con la tastiera italiana così\n    parole = parole.replace(\"è\", \"\\u1E25\")\n    parole = parole.replace(\"+\", \"\\u1E6F\")\n    parole = parole.replace(\"ì\", \"ı͗\")\n    let paroleLatine = parole.split(\" \");\n    let vecchioTesto = testoLatino.split(\" \");\n    if (paroleLatine.length === vecchioTesto.length){\n      soloUltimaParola = false;\n    }\n    settestoLatino(parole);\n    settestoEgiziano(translittera(paroleLatine, vecchioTesto, testoEgiziano, soloUltimaParola));\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div style={{color:\"white\"}}>\n        {String.fromCodePoint(data.M.hieroglyphics)}\n      </div>\n      <Grid \n      container \n      spacing={3}\n      direction=\"row\"\n      >\n        <Grid item xs={6}>\n          <textarea \n            id=\"testoLatino\"\n            name=\"latino\"\n            spellCheck=\"false\"\n            autoFocus\n            onChange={handleChange}\n            value={testoLatino}/>\n        </Grid>\n        <Grid item xs={6}>\n          <textarea \n            id=\"testoEgiziano\"\n            name=\"egiziano\"\n            readOnly\n            value={testoEgiziano}/>\n        </Grid>\n      </Grid>\n      <Keyboard\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n        layoutName={layoutName}\n        layout={{\n          default: [\n            \"` 1 2 3 4 5 6 7 8 9 0 - ı͗ {bksp}\",\n            \"{tab} \\u1E33 w e r t y u i o p \\u1E25 \\u1E6F \\\\\",\n            \"{lock} \\u1D9C s d f g h j k l ; ' {enter}\",\n            \"{shift} z \\u1E2B c v b n m , . / {shift}\",\n            \"{space}\"\n          ],\n          shift: [\n            \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\n            \"{tab} Q W E R T Y U I O P { } |\",\n            '{lock} \\uA723 \\u015D \\u1E0F F G H J K L : \" {enter}',\n            \"{shift} Z \\u1E96 C V B N M < > ? {shift}\",\n            \"{space}\"\n          ]\n        }}\n      />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}